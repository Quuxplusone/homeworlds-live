body {
	/*font-family: Verdana, sans-serif;*/
	font-size: 1rem;
	background-image: url("/images/background.svg");
}

@include media-breakpoint-up(md) {
	body {
		font-size: 1.1rem;
	}
}

/* Because "text-warning" is orange... */
.text-yellow {
	color: #CCCC11 !important;
}

/* And "text-primary" is a bit too bright of a blue */
.text-blue {
	color: #0000CC !important;
}

/* Game styling */
/* For the most part I put here only that which either (1) was done early on, (2) I cannot do with Bootstrap's classes, or (3) I want to be able to adjust more finely than bootstrap's. */

.rewind-overlay {
	position: absolute;
	left: 0;
	right: 0;
	top: 0;
	bottom: 0;
	background-image: url("/images/rewind.svg");
	background-position: center;
	background-size: contain;
	background-repeat: no-repeat;
	z-index: 40;
}

.black-background {
	/* mostly so that the background stars don't interfere with the turn/action indicator or other things */
	background-color: #060606;
}

.systems {
	min-height: 54vh;
	display: flex;
	flex-direction: column;
	justify-content: space-between;
	text-align: center;
}

.system-container {
	display: inline-block;
	padding-left: 1em;
	padding-right: 1em;
	user-select: none;
}
/* some extra breathing room */
.system-container + .system-container {
	margin-left: 0.5vw;
	margin-right: 0.5vw;
}

/* in case of, say, a 1 vs 1+2 homeworld situation, side 1 stars go on the left column */
.left-systems .system-container {
	display: inline-block;
}

.homeworld {
	width: 100%;
	/* text-align makes it centered */
	text-align: center;
}
.homeworld-yours {
	bottom: 0;
}
.homeworld-enemy {
	top: 0;
}

.system-container:not(.homeworld) {
	padding-top: 0.3vh;
	padding-bottom: 0.3vh;
}

.piece[piecetype="star"] {
	margin-left: 0.4vw;
	margin-right: 0.4vw;
}
/* 2 stars in the same system go together */
.piece[piecetype="star"] + .piece[piecetype="star"] {
	margin-left: -0.2vw;
}

.stash {
}
/* Special rendering for stash pieces */
.stash-table td {
	padding: 0.25em;
	min-width: 5px;
	vertical-align: bottom;
}
.stash-table td .flexxer {
	height: 100%;
	display: flex;
	flex-direction: column-reverse;
	justify-content: flex-end;
}
.stash-table img {
	display: block;
	opacity: 0.7; /* makes a cool effect similar to real pyramids */
}

.end-turn-popup {
	top: -1em;
	right: calc(100% + 1em);
	width: 40vw;
	background-color: rgba(64, 64, 64, 0.75);
	border-radius: 4px;
	padding: 0.5em;
}

/* Highlight pieces by making them fade out and in */
@keyframes fade {
	0% { opacity: 1; }
	20% { opacity: 0.9; }
	100% { opacity: 0.5; }
}
.piece[highlight] {
	animation-name: fade;
	animation-duration: 0.5s;
	animation-direction: alternate;
	animation-iteration-count: infinite;
}

/* For the piece that just did something */
@keyframes popout {
	0% { transform: translateY(0); }
	33% { transform: translateY(1.5vh); }
	67% { transform: translateY(-1.5vh); }
	100% { transform: translateY(0); }
}
span[popout] {
	/* only animate once */
	display: inline-block;
	animation-name: popout;
	animation-duration: 0.75s;
	animation-direction: normal;
	animation-iteration-count: 1;
}

/* Action popup */
.action-popup {
	position: absolute;
	background-color: rgba(6, 6, 6, 0.5);
	z-index: 10;
}

/* Clocks */
.clock-value {
	font-family: monospace;
}

/* Summary */
#game-log {
	min-height: 3.5em;
}

/* Tutorials and Sandbox Import/Export, and possibly other things */
.control-popup-wrapper {
	user-select: none; /* dumb fix to stop the whole element from being selected */
	position: absolute;
	left: 0;
	right: 0;
	top: 0;
	bottom: 0;
	display: flex;
	justify-content: center;
	align-items: center;
	background-color: rgba(32, 32, 32, 0.5);
}

.control-popup {
	max-width: 75%;
}

/* in case you want the user to be allowed to select text... */
.control-allow-select {
	user-select: text;
}


.test {
	border: 2px dotted cyan;
}